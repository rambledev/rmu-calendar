// app/api/events/route.ts (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö public access)
import { NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth/next"
import { authOptions } from "@/lib/auth"
import { prisma } from "@/lib/prisma"

// GET - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
export async function GET(request: NextRequest) {
  try {
    console.log("üîç API /events called - Starting query...")
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô public request ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const url = new URL(request.url)
    const isPublicRequest = url.searchParams.get('public') === 'true'
    
    if (isPublicRequest) {
      console.log("üåç Public request - returning all events without auth")
      
      const events = await prisma.event.findMany({
        orderBy: {
          startDate: 'asc'
        },
        // ‡πÑ‡∏°‡πà include user data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö public request
        select: {
          id: true,
          title: true,
          description: true,
          startDate: true,
          endDate: true,
          location: true,
          organizer: true,
          createdAt: true,
          updatedAt: true
        }
      })

      // Set CORS headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö embed
      const response = NextResponse.json(events)
      response.headers.set('Access-Control-Allow-Origin', '*')
      response.headers.set('Access-Control-Allow-Methods', 'GET')
      response.headers.set('Access-Control-Allow-Headers', 'Content-Type')
      
      return response
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authenticated requests (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    const session = await getServerSession(authOptions)
    console.log("üë§ Session:", session?.user?.email, "Role:", session?.user?.role)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    if (!session || !session.user) {
      console.log("‚ùå No session - Authentication required")
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô" },
        { status: 401 }
      )
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SUPERADMIN ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (session.user.role === "SUPERADMIN") {
      console.log("üëë SUPERADMIN access - showing all events")
      const events = await prisma.event.findMany({
        include: {
          user: {
            select: {
              name: true,
              email: true
            }
          }
        },
        orderBy: {
          startDate: 'asc'
        }
      })

      console.log("üì§ SUPERADMIN - Sending response with", events.length, "events")
      return NextResponse.json(events)
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ADMIN ‡πÅ‡∏•‡∏∞ CIO ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    console.log("üë§ User access - showing only own events for userId:", session.user.id)
    const events = await prisma.event.findMany({
      where: {
        userId: session.user.id // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° userId
      },
      include: {
        user: {
          select: {
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        startDate: 'asc'
      }
    })

    console.log(`üìä User ${session.user.email} (${session.user.role}) - Events count: ${events.length}`)
    
    console.log("üì§ Sending response with", events.length, "events")
    return NextResponse.json(events)
    
  } catch (error) {
    console.error("‚ùå Error fetching events:", error)
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", details: (error as Error).message },
      { status: 500 }
    )
  }
}

// Handle OPTIONS request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CORS preflight
export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  })
}

// POST - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session || !session.user) {
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" },
        { status: 401 }
      )
    }

    const body = await request.json()
    const { title, description, startDate, endDate, location, organizer } = body

    console.log("üìù Creating new event by:", session.user.email, "Data:", { title, startDate, endDate, location, organizer })

    // Validation
    if (!title || !startDate || !endDate || !location || !organizer) {
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" },
        { status: 400 }
      )
    }

    // Check if start date is before end date
    if (new Date(startDate) >= new Date(endDate)) {
      return NextResponse.json(
        { error: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î" },
        { status: 400 }
      )
    }

    const event = await prisma.event.create({
      data: {
        title,
        description,
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        location,
        organizer,
        userId: session.user.id // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î userId ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
      },
      include: {
        user: {
          select: {
            name: true,
            email: true
          }
        }
      }
    })

    console.log("‚úÖ Event created successfully:", {
      id: event.id,
      title: event.title,
      userId: event.userId,
      createdBy: session.user.email
    })
    
    return NextResponse.json(event, { status: 201 })
    
  } catch (error) {
    console.error("‚ùå Error creating event:", error)
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", details: (error as Error).message },
      { status: 500 }
    )
  }
}